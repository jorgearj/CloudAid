/* Copyright (C) 2013 Jorge Araújo. All rights reserved.
* 
* This program and the accompanying materials are made available under
* the terms of the Common Public License v1.0 which accompanies this distribution,
* and is available at http://www.eclipse.org/legal/cpl-v10.html
* 
* Id: ServicePopulator.java, Project: CloudGen, 13 Apr 2013 Author: Jorge Araújo
*/
package rdf;

import java.io.*;
import java.util.ArrayList;
import java.util.Date;

import com.hp.hpl.jena.rdf.model.*;

import com.hp.hpl.jena.datatypes.xsd.XSDDatatype;

import data.servicedata.Enumerator;
import data.servicedata.Offering;
import data.servicedata.Price;
import data.servicedata.QualitativeFeature;
import data.servicedata.QuantitativeFeature;
import data.servicedata.ServiceData;



public class ServicePopulator {

	public final static String USDL = "http://www.linked-usdl.org/ns/usdl-core#";
	public final static String RDF  = "http://www.w3.org/1999/02/22-rdf-syntax-ns#";
	public final static String OWL  = "http://www.w3.org/2002/07/owl#";
	public final static String DC   = "http://purl.org/dc/elements/1.1/";
	public final static String XSD  = "http://www.w3.org/2001/XMLSchema#";
	public final static String VANN = "http://purl.org/vocab/vann/";
	public final static String FOAF = "http://xmlns.com/foaf/0.1/";
	public final static String USDK = "http://www.linked-usdl.org/ns/usdl#";
	public final static String RDFS = "http://www.w3.org/2000/01/rdf-schema#";
	public final static String GR   = "http://purl.org/goodrelations/v1#";
	public final static String SKOS = "http://www.w3.org/2004/02/skos/core#";
	public final static String ORG  = "http://www.w3.org/ns/org#";
	public final static String PRICE= "http://www.linked-usdl.org/ns/usdl-price#";
	public final static String LEGAL= "http://www.linked-usdl.org/ns/usdl-legal#";
	public final static String CLOUD= "http://rdfs.genssiz.org/CloudTaxonomy#";
	
	public final static String BASE  = "http://rdfs.genssiz.org/";

	public final static String USDL_Instance_Directory = "./Services/";
	
	//default Strings
	private final String serviceOfferingString = "ServiceOffering_";
	private final String serviceString = "Service_";
	private final String serviceModelString = "ServiceModel_";
	private final String pricePlanString = "PricePlan_";
	private final String PriceComponentString = "PriceComponent_";
	
	//static counter for resource naming
	private static int featureCount = 0;
	
	
	//My own resource :)
	private Resource me;
	
				
	public ServicePopulator(){
		
	}
	
	public void populate(ServiceData instance){
		Date today = new Date(System.currentTimeMillis());
		
		Model model = ModelFactory.createDefaultModel();
		
		String serviceName = instance.getName();
		String baseURI = this.BASE + serviceName + "#";
		
		this.me = model.createResource(baseURI+"Creator").
				addProperty(model.createProperty(RDF+"type"), FOAF+"Person").
				addProperty(model.createProperty(FOAF+"firstName"), model.createLiteral("Jorge")).
				addProperty(model.createProperty(FOAF+"lastName"), model.createLiteral("Araújo")).
				addProperty(model.createProperty(FOAF+"name"), model.createLiteral("Jorge Araújo"));
		
		Resource serviceDescription = model.createResource(this.BASE+serviceName).
				addProperty(model.createProperty(RDF+"type"), OWL+"Ontology").
				addProperty(model.createProperty(RDFS+"label"), model.createLiteral("Service Description for " +instance.getName())).
				addProperty(model.createProperty(RDFS+"comment"), model.createLiteral("This Service description was automatically generated by CloudGen (c)")).
				addProperty(model.createProperty(DC+"created"), ResourceFactory.createTypedLiteral(today.toString(), XSDDatatype.XSDdate)).
				addProperty(model.createProperty(DC+"contributor"), this.me );
		
		//populates usdl core specification with service data
		model = this.populateModel(model, instance, baseURI);
		
		//populates usdl legal specification with service data
		model = this.addUSDLLegal(model, instance, baseURI);
		
		//save the model to file
		this.writeUSDLModeltoFile(model, this.USDL_Instance_Directory + serviceName +".ttl" , "TTL", baseURI);
		
		System.out.println(model.getNsPrefixURI(""));
	}
  
    private Model populateModel(Model model, ServiceData instance, String baseURI) {
    	Date today = new Date();
    	today.setTime(System.currentTimeMillis());
    	
    	Resource provider = model.createResource(baseURI+"Provider_"+instance.getProvider_name()).
    			addProperty(model.createProperty(RDF+"type"), model.createResource(GR+"BusinessEntity")).
    			addProperty(model.createProperty(RDFS+"label"), model.createLiteral(instance.getProvider_name())).
    			addProperty(model.createProperty(FOAF+"page"), model.createLiteral(instance.getProvider_url())).
    			addProperty(model.createProperty(GR+"legalName"), model.createLiteral(instance.getProvider_name()));		
    	
        Resource serviceModel 
          = model.createResource(baseURI+serviceModelString+instance.getName()).
            addProperty(model.createProperty(RDF+"type"), model.createResource(USDL+"ServiceModel")).
            addProperty(model.createProperty(RDFS+"label"), model.createLiteral(instance.getName())).
            addProperty(model.createProperty(DC+"title"), model.createLiteral(instance.getDescription(),"en")).
        	addProperty(model.createProperty(USDL+"hasProvider"), provider);
        
        //populate qualitative features of the service
        ArrayList<Resource> qualitativeProperties = this.populateQualitativeProperties(model, instance.getFreeQualitativeFeatures(), baseURI);
        for(Resource r : qualitativeProperties){
        	serviceModel.addProperty(model.createProperty(GR+"qualitativeProductOrServiceProperty"), r);
        }
        
        //populate quantitative features of the service
        ArrayList<Resource> quantitativeProperties = this.populateQuantitativeProperties(model, instance.getFreeQuantitativeFeatures(), baseURI);
        for(Resource r : quantitativeProperties){
        	serviceModel.addProperty(model.createProperty(GR+"quantitativeProductOrServiceProperty"), r);
        }
        
        //populate ServiceOfferings linked to the service
        ArrayList<Resource> ServiceResources = this.populateServiceOfferings(model, instance, baseURI, provider);
        for(Resource r : ServiceResources){
        	r.addProperty(model.createProperty(USDL+"hasServiceModel"), serviceModel);
        }
        
        return model;  
    }
    
    private ArrayList<Resource> populateQualitativeProperties(Model model,  ArrayList<QualitativeFeature> features, String baseURI){
    	ArrayList<Resource> resources = new ArrayList<Resource>();
    	
    	for(QualitativeFeature feature : features){
    		featureCount++;
    		Resource r = model.createResource(baseURI+"Feature_"+feature.getType()+"_"+feature.getNoSpaceName()+"_"+featureCount).
    				addProperty(model.createProperty(RDF+"type"), model.createResource(CLOUD+feature.getType().getValue())).
    				addProperty(model.createProperty(RDF+"type"), model.createResource(GR+"QualitativeValue")).
    				addProperty(model.createProperty(RDFS+"comment"), model.createLiteral(feature.getDescription())).
    				addProperty(model.createProperty(GR+"name"), model.createLiteral(feature.getName()));
    		  		
    		resources.add(r);
    	}
    	
    	return resources;
    }
    
    private ArrayList<Resource> populateQuantitativeProperties(Model model, ArrayList<QuantitativeFeature> features, String baseURI){
    	ArrayList<Resource> resources = new ArrayList<Resource>();
    	
    	for(QuantitativeFeature feature : features){
    		Resource r = model.createResource(baseURI+"Resource_"+feature.getType()+"_"+featureCount).
    				addProperty(model.createProperty(RDF+"type"), model.createResource(CLOUD+feature.getType().getValue())).
    				addProperty(model.createProperty(RDF+"type"), model.createResource(GR+"QuantitativeValue")).
    				addProperty(model.createProperty(RDFS+"comment"), model.createLiteral(feature.getDescription())).
    				addProperty(model.createProperty(GR+"hasValue"), model.createTypedLiteral(feature.getValueFloat(), XSDDatatype.XSDfloat));

    		if(feature.getUnitOfMeasurement() != null){
    			r.addProperty(model.createProperty(GR+"hasUnitOfMeasurement"), model.createTypedLiteral(feature.getUnitOfMeasurement().getValue(), XSDDatatype.XSDstring));
    		}
    		
    		resources.add(r);
    	}
    	
    	return resources;
    }
    
    private ArrayList<Resource> populateServiceOfferings(Model model, ServiceData instance, String baseURI, Resource provider){
    	ArrayList<Resource> resources = new ArrayList<Resource>();
    	ArrayList<Offering> offerings = instance.getOfferings();
    	int serviceCount = 0;
    	
    	for(Offering offering : offerings){
    		
    		//create the Service
    		Resource service 
            = model.createResource(baseURI+serviceString+instance.getName() + "_"+serviceCount++).
              addProperty(model.createProperty(RDF+"type"), model.createResource(USDL+"Service")).
              addProperty(model.createProperty(RDFS+"label"), model.createLiteral(instance.getName())).
              addProperty(model.createProperty(DC+"title"), model.createLiteral(instance.getDescription(),"en")).
          	addProperty(model.createProperty(USDL+"hasProvider"), provider);
    		
    		//populate qualitative features of the service
	        ArrayList<Resource> qualitativeProperties = this.populateQualitativeProperties(model, offering.getQualitativeFeature(), baseURI);
	        for(Resource r : qualitativeProperties){
	        	service.addProperty(model.createProperty(GR+"qualitativeProductOrServiceProperty"), r);
	        }
	        
	        //populate quantitative features of the service
	        ArrayList<Resource> quantitativeProperties = this.populateQuantitativeProperties(model, offering.getQuantitativefeatures(), baseURI);
	        for(Resource r : quantitativeProperties){
	        	service.addProperty(model.createProperty(GR+"quantitativeProductOrServiceProperty"), r);
	        }
    		
    		//create the offering
	    	Resource serviceOffering 
	        = model.createResource(baseURI + serviceOfferingString + offering.getId()).
	          addProperty(model.createProperty(RDF+"type"), model.createResource(USDL+"ServiceOffering")).
	          addProperty(model.createProperty(RDFS+"label"), model.createLiteral(offering.getId()));
	    	
	        //populate price module for the offering
	        Resource pricePlan = this.addUSDLPricing(model, offering, baseURI);
	        //link pricePlan to the Offering
	        serviceOffering.addProperty(model.createProperty(PRICE+"hasPricePlan"), pricePlan);
	        
	        //include the service in this offering
	        serviceOffering.addProperty(model.createProperty(USDL+"includes"), service);
	        
	    	resources.add(service);
    	}
    	
    	return resources;
    }
    
    private Resource addUSDLPricing(Model model, Offering offering, String baseURI) {

    	
    	Resource pricePlan = model.createResource(baseURI+ pricePlanString + offering.getId()).
                addProperty(model.createProperty(RDF+"type"), model.createResource(PRICE+"PricePlan")).
                addProperty(model.createProperty(RDFS+"label"), model.createLiteral("PricePLan for offering "+ offering.getId()));
                
    	//populate PriceComponents
    	ArrayList<Resource> priceComponents = this.populatePriceComponents(model, offering, baseURI);
    	for(Resource r : priceComponents){
    		pricePlan.addProperty(model.createProperty(PRICE+"hasPriceComponent"), r);
    	}
    	
        return pricePlan;  
    }    
    
    private ArrayList<Resource> populatePriceComponents(Model model, Offering offering, String baseURI){
    	ArrayList<Resource> resources = new ArrayList<Resource>();
    	ArrayList<Price> prices = offering.getPrice();
    	
    	int count = 0;
    	
    	Resource monthMetric = model.createResource(baseURI + "MonthMetric").
    			addProperty(model.createProperty(RDF+"type"), model.createResource(GR+"QuantitativeValue")).
    	        addProperty(model.createProperty(GR+"hasUnitOfMeasurement"), model.createTypedLiteral(Enumerator.UNIT_OF_MEASUREMENT.MONTH.getValue(), XSDDatatype.XSDstring)).
    	        addProperty(model.createProperty(GR+"hasValue"), model.createTypedLiteral("1", XSDDatatype.XSDint));
    			
    	
    	for(Price price : prices){
    		count++;
    		Resource priceUnit = model.createResource(baseURI + "priceUnit_"+offering.getId()+"_"+count).
    				addProperty(model.createProperty(RDF+"type"), model.createResource(GR+"PriceSpecification")).
    				addProperty(model.createProperty(GR+"hasCurrency"), model.createLiteral(price.getCurrency())).
    				addProperty(model.createProperty(GR+"hasCurrencyValue"), model.createTypedLiteral(price.getPrice(), XSDDatatype.XSDfloat));
    		//add the pricing unit, if it exist
    		if(price.getPricingUnit() != null)
    				priceUnit.addProperty(model.createProperty(GR+"hasUnitOfMeasurement"), model.createTypedLiteral(price.getPricingUnit().getValue(), XSDDatatype.XSDstring));
    		
	    	Resource priceComponent = model.createResource(baseURI + PriceComponentString +offering.getId()+"_"+count).
	    			addProperty(model.createProperty(RDF+"type"), model.createResource(PRICE+"PriceComponent")).
	    			addProperty(model.createProperty(PRICE+"hasMetrics"), monthMetric).
	    			addProperty(model.createProperty(PRICE+"hasPrice"), priceUnit);
	        
	        resources.add(priceComponent);
    	}
    	return resources;
    }

    private Model addUSDLLegal(Model model, ServiceData instance, String baseURI) {
    	return model;
    }
    
	private void writeUSDLModeltoFile(Model m, String filePath, String lang, String baseURI) {

		m.setNsPrefix("usdl",  USDL);
		m.setNsPrefix("rdf",   RDF);
		m.setNsPrefix("owl",   OWL);
		m.setNsPrefix("dc",    DC );
		m.setNsPrefix("xsd",   XSD);
		m.setNsPrefix("vann",  VANN);
		m.setNsPrefix("foaf",  FOAF);
		m.setNsPrefix("rdfs",  RDFS);
		m.setNsPrefix("gr",    GR  );
		m.setNsPrefix("skos",  SKOS);
		m.setNsPrefix("org",   ORG );
		m.setNsPrefix("price", PRICE );
		m.setNsPrefix("legal", LEGAL );
		m.setNsPrefix("cloud", CLOUD);
		m.setNsPrefix("",   baseURI );
		
		
		try {
			File outputFile = new File(filePath);
			if (!outputFile.exists()) {
	        	outputFile.createNewFile();        	 
	        }
			
			FileOutputStream out = new FileOutputStream(outputFile);
			m.write(out, lang);
			out.close();
		}
		catch (IOException e) { System.out.println(e.toString()); }
	}
	
	
  private void dumpUSDL(Model model) {	
    // list the statements in the graph
	    StmtIterator iter = model.listStatements();
	     
	    // print out the predicate, subject and object of each statement
	    while (iter.hasNext()) {
	        Statement stmt      = iter.nextStatement();         // get next statement
	        Resource  subject   = stmt.getSubject();   // get the subject
	        Property  predicate = stmt.getPredicate(); // get the predicate
	        RDFNode   object    = stmt.getObject();    // get the object
	        
	        System.out.print(subject.toString());
	        System.out.print(" " + predicate.toString() + " ");
	        if (object instanceof Resource) {
	            System.out.print(object.toString());
	        } else {
	            // object is a literal
	            System.out.print(" \"" + object.toString() + "\"");
	        }
	        System.out.println(" .");
	    }
	}
}
